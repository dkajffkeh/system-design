name: Deploy to Amazon ECS

on:
  workflow_dispatch:

env:
  IMAGE_NAME: id-generator
  ECR_REGISTRY: ${{ secrets.ECR_REPOSITORY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECS_SERVICE: id-generator-service-mdwr09u6
  ECS_CLUSTER: id-generator-cluster
  ECS_TASK_DEFINITION: ./task-definition/id-generator/id-generator-dev.json
  CONTAINER_NAME: id-generator

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build the id-generator module (Gradle)
        run: gradle clean -x test :$IMAGE_NAME:build

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:latest ./id-generator
          docker tag $IMAGE_NAME:latest $ECR_REGISTRY:latest

      - name: Push Docker image to ECR
        run: |
          docker push $ECR_REGISTRY:latest

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.ECR_REGISTRY }}:latest

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          
      
        
      
